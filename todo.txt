Log:
15.April.2006 
- Paper submitted to FSE'06
April.2006 
- The affinity operator becomes higher-order: to be used as "affinity for hulling" and "affinity for widening". 
- Implemented a variant of the widening operator proposed in (Bagnara - VMCAI'04). This widenPPL (based on subsets) performs worse compared to our widening.
June.2006 
- Implemented the (range-based) Hausdorff heuristic (Sankaranarayanan - SAS'06): its results are worse compared to the Similarity heuristic.
- Command-line flags for kind-of-postderivation, kind-of-prederivation, m-bound, heuristic.
2.September.2006
- Paper submitted to ASIAN'06
12.October.2006
- Received accept notification from ASIAN'06
18-31.October.2006
- Trip to US: talks at PSU, Berkeley, Stanford
6-14.November.2006
- Implementation for bugs paper: Outcome inference
- Examples from Synergy(FSE'06)
15.November.2006
- Paper submitted to PLDI'07
16-.November.2006
- Fix bugs & Modularize the system
25.January.2007
- Received reject notification from PLDI'07
14-19.March.2007
- Review paper according to PLDI'reviewers comments.




=========
Bugs (March 2007):
- function in collatz.imp. With pass-by-value parameters: {OK=false,ERR=false}
- running optimized version of imp (-O2) gives segm.fault.

=========
To do (November 2006):
- pretty print for Omega formulae
- fse.cars.imp

=========
Questions after ASIAN'06 submission:
1. what is the difference between:
- PairwiseCheck (f1 union f2)
- Hull (f1 union f2), if (Hull (f1 union f2)) intersection (complement (f1 union f2)) == False
2. Useful to do a "closure" of f1, before widen(f1,f2) ?
- probably needed if widening is done "early" (before related disjuncts are hulled)
3. Is it ok to choose m=min(givenM,minPairWiseF3) ?
Situations when no of disjuncts in PairWiseF3 is bigger than 3:
- mergesort.mergeF2: Post(m=4) => Post(m=3); Post(m=5) = Post(m=4), with minPairWiseF3 is 5
- bsearch.lookup: Post(m=3) unrelated Post(m=2), while minPairWiseF3 is 9
- SOR.loop1: Post(m=4) => Post(m=3), with minPairWiseF3 is 4
- FFT.bitrevloop: minPairWiseF3 is 5
- FFT.loop_a0: minPairWiseF3 is 4
- FFT.loopb:  minPairWiseF3 is 4
- FFT.loop_a1: minPairWiseF3 is 4
4. Why is the BU fix not convergent in the following situations?
- FFT.loop_a0
- FFT.whilef_0
5. Is affinity a good measure for pairing disjuncts for widening?
- example: bubblesort.doi with mdisj=3 gives a matrix with 6 affinities of 100, but widening any pair should not be equivalent?
6. queens, quicksort need strong-post for 100% check elimination. Why?
- "imp mergesort.imp StrongWeak" is able to eliminate all checks. But either StrongStrong or StrongWeak infers TDinv for msort as (0=1)
7. combSelHullBase: what to do when (length nonRec==0) ? (bsearch,mergesort,FFT)
- combSelHullBase: does it happen that (length rec==0) ? if it is possible, what to do?
8. Some methods have long inference time. Why?
- LU: precondition for function "loop" is huge
- mergesort: many preconditions (use amalgamation?)
- linpack (? - todo: draw complete call graph)
9. How to combine part-eval (affine-equalities?) with precise polyhedra analysis?
- problems with bsearch, FFT, linpack: getMid, mul2, mul201
- be careful to change back the benchmarks (from mul201 to mul), so that 100% checks can be eliminated.

=========
Differences between fixpoint(old) and fixpoint2k:
1. fixpoint:
- conjunctive BUfix may not converge (on functions like initarr)
- not able to compute postcondition for passByRef parameters
- combSelHullBase
2. fixpoint2k:
- new widening strategy: iterates using previous widened formula...it converges (without losing precision on the benchmarks)
- passByRef
- combSelHull, widen (pairs matching disjuncts)
- more expensive: iterateAffinMx computes Fhull,Fdiff n^2 times

=========
Methods that require disjunctions. Number of disjuncts for F1,F2,F3 during BUfix:
- initarr,copyseq,dotprod,sumvec,sentinel: 1,2,3
- bsearch: lookup: 2,5,11;
- bubblesort: 1,2,3
- hanoi: 1,2,3
- mergesort: mergeF2: 2,4,6; msort: 1,2,4;
- queens: test: 2,3,4; loopQ: 2,3,4;
- quicksort: changeM: 1,3,6; quick_sort: 1,2,5;

- FFT: bitrevloop: 3,4,6; loop_a0: 3,4,5; loop_log2: 2,3,4;
- LU: loopi_jp: 1,3,6; loop: 2,2,2
- SOR: loop2: 1,2,3
- linpack: loop_dgesl2_kb: 1,3,6; loop_dgesl2_k: 1,3,6; loop_idamax1_i: 1,3,6; loop_dgefa2_j: 1,7,13
=========


===================================
To Do list - prior to 2006
===================================
1. To do:
- is annoInv a fixpoint? check: Inv * onestep => Inv
- duplicate recursive functions in FST and REC, to be able to use Strong prederivation safely
(if separateFstFromRec = True, LU does not type-check)
- propagate additional precondition (Invariant), from the REC to FST copy of a recursive method
- while-for: in IMP use pass-by-reference; in C code convert back to loops.
- printProgImpp should be done after type-checking (for the specialized program, post is computed after type-checking)
- desugaring (sgFwDeclInExp) cannot handle code like: t v:= if b then e1 else e2; e
This should be desugared to: t v:=dummy; if b then [t:=e1] else [t:=e2];e
- pretty-printed Imp+ uses "fresh" size variables. (conflict with those freshly generated).
- No aliasing? insert automatically code to deallocate arrays (end of scope of declared arrays)
- Aliasing? use a garbage collector...

2. Bugs:
- checks from array declaration in recursive functions are not handled specially
- show Formula in Omega_types.hs does not generate fresh names for variables quantified in Exists and Forall

3. Be careful:
- after conditional, constraints are lost? NO. Be careful with operator precedence: if must be enclosed in accolades.
- functions generated in C need a prototype, if they have a float as parameter (other than the last one).
  Without the prototype, the generated executable will crash, or simply give wrong results.
- keep Primitives.c synchronized with Primitives.all.c

==================
General Objectives
==================
1. type checking works on all examples
2. pre-condition derivation + specialization on all examples
3. fixpoint inference on all examples
4. scale-up 
- to large examples
- to include more features from C (what are the problems? aliasing, pointers?)
5. Add other features:
- convert (for,while) to recursion
- polyvariant specialization (code duplication).
