#include "Primitives.imp"

Void main()
{
  Int dim:=10;
  Float [Int][dim] A := 0.0;
  Int res := -1;
  init_arrF(A,0,dim-1);
  res := Bsearch(A,2.0);
  printF(2.0);
  printArrF(A);
  print(res);
  printStats()
}

Void init_arrF(Float[Int] a, Int i, Int j)
{
  if (i>j) then { Void }
  else {
    assignF(a,i,myrandomF(10.0));
    init_arrF(a,i+1,j)
  }
}

Int Bsearch(Float [Int] a,Float k) 
{ 
  Int l:= lenF(a,1);
  lookup(a,k,0,l-1)
}

Int lookup(Float[Int] a,Float k,Int i,Int j)
{	
  if i>j then { -1 }
  else {
  	Int m:=getmid(i,j); 
    Float v:=subF(a,m);
    if (eqFF(v,k)) then { m }
    else {
      if gtFF(v,k)
        then { lookup (a,k,i,m-1) }
        else { lookup (a,k,m+1,j) }
    }
  }
}

Int getmid(Int i,Int j) { 
-- postcondition of div2 is tricky: OK fixpoint infers a useless post for lookup
  div2(i+j)
--  getmidPOS(i,j) 
}
