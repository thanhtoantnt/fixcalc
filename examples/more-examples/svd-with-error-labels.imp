#include "Primitives.imp"

float SIGN(float a, float b) {
  if (gteFF(b,0.0)) then { fabs(a) } else { minusIF(0,fabs(a))} }

void svdcmp(float[int,int] a, int m, int n, float[int] w, float[int,int] v)
{-     /*
       Given a matrix a[1..m][1..n], this routine computes its
       singular value decomposition, A = U·W·V
       T. Thematrix U replaces a on output. The diagonal matrix of
       singular values W is output as a vector w[1..n]. The matrix V
       (not the transpose V T ) is output as v[1..n][1..n].
     */

     /* Dimensions:

	a[1..m][1..n]

	w[1..n]

	v[1..n][1..n]

	rv1=vector(1,n)

     */ -}
{
--  float pythag(float a, float b);
  int flag:=0; int i:=0; int its:=0; int j:=0; int jj:=0; int k:=0; int l:=0; int nm:=0;
  float anorm:=0.0; float c:=0.0; float f:=0.0; float g:=0.0; float h:=0.0; float s:=0.0; float scale:=0.0; float x:=0.0; float y:=0.0; float z:=0.0;
  float[int][n] rv1:=0.0; -- what size to use?

  g:=0.0; scale:=0.0; anorm:=0.0; 

  for (i:=1;i<=n;i:=i+1) {
    l:=i+1;
    
    --if ( ! (1<=i && i<=n) ) { ERROR:; }
    assignF(rv1,i,mulFF(scale,g));


    g:=0.0; s:=0.0; scale:=0.0;

--    if (i <= m) then {
--
      for (k:=i;k<=m;k:=k+1) { 
        --	if ( ! (1<=k && k<=m) ) { ERROR:; }
	      --  if ( ! (1<=i && i<=n) ) { ERROR:; } 
        scale := plusFF(scale,fabs(subF2(a,k,i)))
      };

--      if (scale) {

	for (k:=i;k<=m;k:=k+1) {
	  
--	  if ( ! (1<=k && k<=m) ) { ERROR:; }
--	  if ( ! (1<=i && i<=n) ) { ERROR:; }
	  assignF2(a,k,i,scale);
	  s := plusFF(s,mulFF(subF2(a,k,i),subF2(a,k,i)))
	}

--	if ( ! (1<=i && i<=m) ) { ERROR:; }
--	if ( ! (1<=i && i<=n) ) { ERROR:; }
--	f:=subF2(a,i,i);

--	g := minusIF(0,SIGN(sqrt(s),f));
--	h:=minusFF(mulFF(f,g),s);


--	if ( ! (1<=i && i<=m) ) { ERROR:; }
--	if ( ! (1<=i && i<=n) ) { ERROR:; }
--	assignF2(a,i,i,minusFF(f,g))
--
--	for (j=l;j<=n;j++) {
--	  for (s=0.0,k=i;k<=m;k++) {
--
--	    if ( ! (1<=k && k<=m) ) { ERROR:; }
--	    if ( ! (1<=i && i<=n) ) { ERROR:; }
--	    if ( ! (1<=j && j<=n) ) { ERROR:; }
--	    s += a[k][i]*a[k][j];
--	  }
--	  f=s/h;
--	  for (k=i;k<=m;k++) {
--
--	    if ( ! (1<=k && k<=m) ) { ERROR:; }
--	    if ( ! (1<=i && i<=n) ) { ERROR:; }
--	    if ( ! (1<=j && j<=n) ) { ERROR:; }
--	    a[k][j] += f*a[k][i];
--	  }
--	}
--	for (k=i;k<=m;k++) { 
--
--	  if ( ! (1<=k && k<=m) ) { ERROR:; }
--	  if ( ! (1<=i && i<=n) ) { ERROR:; }
--	  a[k][i] *= scale;
--	}
--
--      }
--
--    }
--
--    w[i]=scale * g;
--    g=s=scale=0.0;
--    if (i <= m && i != n) {
--      for (k=l;k<=n;k++) {
--
--	if ( ! (1<=i && i<=m) ) { ERROR:; }
--	if ( ! (1<=k && k<=n) ) { ERROR:; }
--	scale += fabs(a[i][k]);
--      }
--      if (scale) {
--	for (k=l;k<=n;k++) {
--
--	  if ( ! (1<=i && i<=m) ) { ERROR:; }
--	  if ( ! (1<=k && k<=n) ) { ERROR:; }
--	  a[i][k] /= scale;
--
--
--	  if ( ! (1<=i && i<=m) ) { ERROR:; }
--	  if ( ! (1<=k && k<=n) ) { ERROR:; }
--	  s += a[i][k]*a[i][k];
--	}
--	
--	if ( ! (1<=i && i<=m) ) { ERROR:; }
--	if ( ! (1<=l && l<=n) ) { ERROR:; }
--	f=a[i][l];
--
--	g = -SIGN(sqrt(s),f);
--	h=f*g-s;
--
--	if ( ! (1<=i && i<=m) ) { ERROR:; }
--	if ( ! (1<=l && l<=n) ) { ERROR:; }
--	a[i][l]=f-g;
--	for (k=l;k<=n;k++) { 
--
--	  if ( ! (1<=i && i<=m) ) { ERROR:; }
--	  if ( ! (1<=k && k<=n) ) { ERROR:; }
--	  rv1[k]=a[i][k]/h;
--	}
--	for (j=l;j<=m;j++) {
--	  for (s=0.0,k=l;k<=n;k++) { 
--
--	    if ( ! (1<=j && j<=m) ) { ERROR:; }
--	    if ( ! (1<=i && i<=m) ) { ERROR:; }
--	    if ( ! (1<=k && k<=n) ) { ERROR:; }
--	    s += a[j][k]*a[i][k];
--	  }
--	  for (k=l;k<=n;k++) { 
--
--	    if ( ! (1<=j && j<=m) ) { ERROR:; }
--	    if ( ! (1<=k && k<=n) ) { ERROR:; }
--	    a[j][k] += s*rv1[k];
--	  }
--	}
--	for (k=l;k<=n;k++) { 
--
--	  if ( ! (1<=i && i<=m) ) { ERROR:; }
--	  if ( ! (1<=k && k<=n) ) { ERROR:; }
--	  a[i][k] *= scale;
--	}
--      }
--    }
--
--    anorm=FMAX(anorm,(fabs(w[i])+fabs(rv1[i])));
  }

{-
  for (i=n;i>=1;i--) { // Accumulation of right-hand transformations. 
    if (i < n) {
      if (g) {
	for (j=l;j<=n;j++) { // Double division to avoid possible underflow. 

	  if ( ! (1<=j && j<=n) ) { ERROR:; }
	  if ( ! (1<=i && i<=n) ) { ERROR:; }
	  //	  if ( ! (1<=i && i<=m) ) { ERROR:; } // TODO feasible counterexample found, hm
	  if ( ! (1<=l && l<=n) ) { ERROR:; }
	  v[j][i]=(a[i][j]/a[i][l])/g;
	}
	for (j=l;j<=n;j++) {
	  for (s=0.0,k=l;k<=n;k++) { 

	    //if ( ! (1<=i && i<=m) ) { ERROR:; } // TODO feasible counterexample found, hm
	    if ( ! (1<=k && k<=n) ) { ERROR:; }
	    if ( ! (1<=j && j<=n) ) { ERROR:; }
	    s += a[i][k]*v[k][j];
	  }
	  for (k=l;k<=n;k++) { 
	    if ( ! (1<=k && k<=n) ) { ERROR:; }
	    if ( ! (1<=j && j<=n) ) { ERROR:; }
	    if ( ! (1<=i && i<=n) ) { ERROR:; }
	    v[k][j] += s*v[k][i];
	  }
	}
      }
      for (j=l;j<=n;j++) { 

        if ( ! (1<=j && j<=n) ) { ERROR:; }
	if ( ! (1<=i && i<=n) ) { ERROR:; }
	v[i][j]=v[j][i]=0.0;
      }
    }

    if ( ! (1<=i && i<=n) ) { ERROR:; }
    v[i][i]=1.0;
    if ( ! (1<=i && i<=n) ) { ERROR:; }
    g=rv1[i];
    l=i;
  }


  if (m<=n) { i = m; } else { i = n; } // TODO model min precisely!!!
  //  for (i=IMIN(m,n);i>=1;i--) { // Accumulation of left-hand transformations. 
  for ( ;i>=1;i--) { // Accumulation of left-hand transformations. 
    l=i+1;

    if ( ! (1<=i && i<=n) ) { ERROR:; } 
    g=w[i];
    for (j=l;j<=n;j++) {

      if ( ! (1<=i && i<=m) ) { ERROR:; }
      if ( ! (1<=j && j<=n) ) { ERROR:; }
      a[i][j]=0.0;
    }

    if (g) {
      g=1.0/g;
      for (j=l;j<=n;j++) {
	for (s=0.0,k=l;k<=m;k++) {

	  if ( ! (1<=k && k<=m) ) { ERROR:; }
	  if ( ! (1<=i && i<=n) ) { ERROR:; }
	  if ( ! (1<=j && j<=n) ) { ERROR:; }
	  s += a[k][i]*a[k][j];
	}

	if ( ! (1<=i && i<=m) ) { ERROR:; }
	if ( ! (1<=i && i<=n) ) { ERROR:; }
	f=(s/a[i][i])*g;
	for (k=i;k<=m;k++) {

	  if ( ! (1<=k && k<=m) ) { ERROR:; }
	  if ( ! (1<=j && j<=n) ) { ERROR:; }
	  if ( ! (1<=i && i<=n) ) { ERROR:; }
	  a[k][j] += f*a[k][i];
	}
      }
      for (j=i;j<=m;j++) { 

	if ( ! (1<=j && j<=m) ) { ERROR:; } 
	if ( ! (1<=i && i<=n) ) { ERROR:; }
	a[j][i] *= g;
      }
    } else for (j=i;j<=m;j++) { 
      if ( ! (1<=j && j<=m) ) { ERROR:; } 
      if ( ! (1<=i && i<=n) ) { ERROR:; }

      a[j][i]=0.0;
    }
    
    if ( ! (1<=i && i<=m) ) { ERROR:; } 
    if ( ! (1<=i && i<=n) ) { ERROR:; }
    ++a[i][i];
  }

  for (k=n;k>=1;k--) { 
    //Diagonalization of the bidiagonal form: Loop
    //over singular values, and over allowed
    //iterations. 
    for (its=1;its<=30;its++) { 
      flag=1;
      for (l=k;l>=1;l--) { // Test for splitting. 
	nm=l-1; // Note that rv1[1] is always zero.

	if ( ! (1<=l && l<=n) ) { ERROR:; } 
    	if ((float)(fabs(rv1[l])+anorm) == anorm) {
	  flag=0;
	  break;
	}
	//if ( ! (1<=nm && nm<=n) ) { ERROR:; } // TODO feasible counterexample found
	if ((float)(fabs(w[nm])+anorm) == anorm) break;
      }
      if (flag) {
	c=0.0; // Cancellation of rv1[l], if l > 1. 
	s=1.0;
	for (i=l;i<=k;i++) {

	  // if ( ! (1<=i && i<=n) ) { ERROR:; } // TODO feasible counterexample found
	  f=s*rv1[i];
	  rv1[i]=c*rv1[i];
	  if ((float)(fabs(f)+anorm) == anorm) break;


	  // if ( ! (1<=i && i<=n) ) { ERROR:; } // TODO feasible counterexample found
	  g=w[i];
	  h=pythag(f,g);

	  // if ( ! (1<=i && i<=n) ) { ERROR:; } // TODO feasible counterexample found
	  w[i]=h;
	  h=1.0/h;
	  c=g*h;
	  s = -f*h;
	  for (j=1;j<=m;j++) {

	    if ( ! (1<=j && j<=m) ) { ERROR:; }
	    // if ( ! (1<=nm && nm<=n) ) { ERROR:; } // TODO feasible counterexample found
	    // if ( ! (1<=i && i<=n) ) { ERROR:; } // TODO feasible counterexample found
	    y=a[j][nm];
	    z=a[j][i];
	    a[j][nm]=y*c+z*s;
	    a[j][i]=z*c-y*s;
	  }
	}
      }
      
      if ( ! (1<=k && k<=n) ) { ERROR:; }
      z=w[k];
      if (l == k) { // Convergence. 
	if (z < 0.0) { // Singular value is made nonnegative. 

	  if ( ! (1<=k && k<=n) ) { ERROR:; }
	  w[k] = -z;
	  for (j=1;j<=n;j++) { 

	    if ( ! (1<=j && j<=n) ) { ERROR:; }
	    if ( ! (1<=k && k<=n) ) { ERROR:; }
	    v[j][k] = -v[j][k];
	  }
	}
	break;
      }
      if (its == 30) nrerror("no convergence in 30 svdcmp iterations");

      //      if ( ! (1<=l && l<=n) ) { ERROR:; } // TODO feasible counterexample
      x=w[l]; // Shift from bottom 2-by-2 minor. 
      nm=k-1;

      //      if ( ! (1<=nm && nm<=n) ) { ERROR:; } // TODO feasible counterexample
      y=w[nm];
      g=rv1[nm];

      if ( ! (1<=k && k<=n) ) { ERROR:; }
      h=rv1[k];
      f=((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);
      g=pythag(f,1.0);
      f=((x-z)*(x+z)+h*((y/(f+SIGN(g,f)))-h))/x;
      c=s=1.0; // Next QR transformation: 
      for (j=l;j<=nm;j++) {
	i=j+1;

	if ( ! (1<=i && i<=n) ) { ERROR:; } 
	g=rv1[i];
	y=w[i];
	h=s*g;
	g=c*g;
	z=pythag(f,h);
	rv1[j]=z;
	c=f/z;
	s=h/z;
	f=x*c+g*s;
	g = g*c-x*s;
	h=y*s;
	y *= c;
	for (jj=1;jj<=n;jj++) {

	  if ( ! (1<=jj && jj<=n) ) { ERROR:; }
	  if ( ! (1<=i && i<=n) ) { ERROR:; } 
	  x=v[jj][j];
	  z=v[jj][i];

	  // if ( ! (1<=j && j<=n) ) { ERROR:; } // TODO feasible counterexample

	  v[jj][j]=x*c+z*s;
	  v[jj][i]=z*c-x*s;
	}
	z=pythag(f,h);

	// if ( ! (1<=j && j<=n) ) { ERROR:; } // TODO feasible counterexample 
	w[j]=z; // Rotation can be arbitrary if z = 0. 
	if (z) {

	  if ( z == 0 ) { ERROR:; } 
	  z=1.0/z;
	  c=f*z;
	  s=h*z;
	}
	f=c*g+s*y;
	x=c*y-s*g;
	for (jj=1;jj<=m;jj++) {
	  if ( ! (1<=jj && jj<=m) ) { ERROR:; }
	  // if ( ! (1<=j && j<=n) ) { ERROR:; } // TODO feasible counterexample
	  if ( ! (1<=i && i<=n) ) { ERROR:; } 
	  y=a[jj][j];
	  z=a[jj][i];
	  a[jj][j]=y*c+z*s;
	  a[jj][i]=z*c-y*s;
	}
      }

      // if ( ! (1<=l && l<=n) ) { ERROR:; } // TODO feasible counterexample
      rv1[l]=0.0;

      if ( ! (1<=k && k<=n) ) { ERROR:; } 
      rv1[k]=f;
      w[k]=x;
    }
  }

  free_vector(rv1,1,n);
-}
}
