#Int fcnt(Int x) {
#  if (x<=0) then { x }
#  else { fcnt(x-2) }
#}
 
fcnt:={[x] -> [res] -> [x]: exists(PRMx: x<=0 && res=x || x>0 && exists(x1: x1=x-2 && fcnt(x1,res)))};

#SelHull makes the correct choice. F2W is a precise fixpoint: (-1<=res<=0 && x >= 1) || (0 >= x && x = res))
F0:={[]:0=1};
F1:=fcnt(F0);F1;
F2:=fcnt(F1);F2;
F3:=fcnt(F2);F3;
F3H:=selhull(F3,2,SimHeur);F3H;

#####SelHull: start iterating with 3 disjuncts:
#{[x,res]:(0 >= x && x = res)};
#{[res,x]:((res + 1 >= 0 && 0 >= res) && res + 2 = x)};
#{[res,x]:((res + 1 >= 0 && 0 >= res) && res + 4 = x)};
#SelHullMatrix - noRows: 3, noCols: 3
#-1 21 21
#-1 -1 34
#-1 -1 -1
#Chosen elem is: (2,3)
#SelHull chose disjuncts with less than 100% affinity: 34


F2W:=widen(F2,F3H,SimHeur);F2W; 
fixtestPost([fcnt],[F2W]);

#################################
#SelHull chooses wrong disjuncts. Fix2 is not precise: ((x >= 2 + res && x >= 1) || ((res + 4 >= x && x >= res) && 0 >= res))

Fix2:=bottomup(fcnt,2,SimHeur);Fix2; 

#####SelHull: start iterating with 3 disjuncts:
#{[res,x]:(0 >= res && res = x)};
#{[x,res]:((x >= 1 && 2 >= x) && x = res + 2)};
#{[x,res]:((x >= 3 && 4 >= x) && x = res + 4)};
#SelHullMatrix - noRows: 3, noCols: 3
#-1 41 41
#-1 -1 34
#-1 -1 -1
#Chosen elem is: (1,3)
